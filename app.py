import streamlit as st
from openai import OpenAI
import docx
import requests
import io
import time
from datetime import datetime
from config import OPENROUTER_API_KEY, HUGGINGFACE_TOKEN

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–Ω–∞ –∑–≤–æ–Ω–∫–æ–≤",
    page_icon="üìû",
    layout="wide"
)

st.title("üìû –ê–≥–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ —Ç–æ–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª), –∏ –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –µ–≥–æ –æ–±—â–∏–π —Ç–æ–Ω –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.
*–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ OpenRouter –∏ –º–æ–¥–µ–ª–∏ DeepSeek V3.*
""")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# URL –¥–ª—è Hugging Face API
API_URL = "https://router.huggingface.co/hf-inference/models/distilbert/distilbert-base-uncased-finetuned-sst-2-english"
headers = {
    "Authorization": f"Bearer {HUGGINGFACE_TOKEN}",
}


# -------------------- –§—É–Ω–∫—Ü–∏–∏ --------------------
def create_test_docx_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π DOCX —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
    doc = docx.Document()

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    doc.add_heading('–ü—Ä–∏–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', 0)

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü—ã —Å —Ç–µ–∫—Å—Ç–æ–º
    doc.add_paragraph('–î–∞—Ç–∞: ' + datetime.now().strftime("%d.%m.%Y"))
    doc.add_paragraph('')
    doc.add_paragraph('–û–ø–µ—Ä–∞—Ç–æ—Ä: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–æ–º–ø–∞–Ω–∏—è "–°–µ—Ä–≤–∏—Å –ü–ª—é—Å". –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?')
    doc.add_paragraph('')
    doc.add_paragraph('–ö–ª–∏–µ–Ω—Ç: –î–æ–±—Ä—ã–π –¥–µ–Ω—å. –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º - –æ–Ω –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å.')
    doc.add_paragraph('')
    doc.add_paragraph(
        '–û–ø–µ—Ä–∞—Ç–æ—Ä: –ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –í—ã –ø—Ä–æ–±–æ–≤–∞–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä?')
    doc.add_paragraph('')
    doc.add_paragraph('–ö–ª–∏–µ–Ω—Ç: –î–∞, –ø—Ä–æ–±–æ–≤–∞–ª, –Ω–µ –ø–æ–º–æ–≥–ª–æ. –≠—Ç–æ –æ—á–µ–Ω—å —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç, —è –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å!')
    doc.add_paragraph('')
    doc.add_paragraph(
        '–û–ø–µ—Ä–∞—Ç–æ—Ä: –ö–æ–Ω–µ—á–Ω–æ, –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ. –Ø —Å–æ–∑–¥–∞–º –∑–∞—è–≤–∫—É –¥–ª—è –Ω–∞—à–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.')
    doc.add_paragraph('')
    doc.add_paragraph('–ö–ª–∏–µ–Ω—Ç: –°–ø–∞—Å–∏–±–æ. –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ —Ä–µ—à–∏—Ç –ø—Ä–æ–±–ª–µ–º—É.')
    doc.add_paragraph('')
    doc.add_paragraph('–û–ø–µ—Ä–∞—Ç–æ—Ä: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ—à–∏–º! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    doc_io = io.BytesIO()
    doc.save(doc_io)
    doc_io.seek(0)

    return doc_io


def query(payload):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Hugging Face API"""
    response = requests.post(API_URL, headers=headers, json=payload)
    return response.json()


def extract_text_from_file(uploaded_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ñ–∞–π–ª–∞
        current_position = uploaded_file.tell()
        uploaded_file.seek(0)

        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        if uploaded_file.type == "text/plain" or uploaded_file.name.endswith('.txt'):
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['utf-8', 'cp1251', 'windows-1251', 'iso-8859-1']
            for encoding in encodings:
                try:
                    uploaded_file.seek(0)
                    content = uploaded_file.read().decode(encoding)
                    return content
                except UnicodeDecodeError:
                    continue

            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–µ.")
            return None

        # –î–ª—è DOCX —Ñ–∞–π–ª–æ–≤
        elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            doc = docx.Document(uploaded_file)
            return "\n".join([paragraph.text for paragraph in doc.paragraphs])

        else:
            st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt –∏ .docx —Ñ–∞–π–ª—ã.")
            return None

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None
    finally:
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ñ–∞–π–ª–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        uploaded_file.seek(current_position)


def analyze_sentiment_with_api(text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Hugging Face API."""
    if not HUGGINGFACE_TOKEN:
        return {"error": "–¢–æ–∫–µ–Ω Hugging Face –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."}

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        output = query({
            "inputs": text[:512]  # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä–≤—ã—Ö 512 —Å–∏–º–≤–æ–ª–æ–≤
        })

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç API
        if isinstance(output, list) and len(output) > 0:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            most_confident = max(output[0], key=lambda x: x['score'])
            return most_confident
        elif isinstance(output, dict) and 'error' in output:
            return {"error": output['error']}
        else:
            return {"error": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"}

    except requests.exceptions.RequestException as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Hugging Face API: {e}"}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}"}


def generate_llm_recommendations(text, sentiment_label):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenRouter API –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ç–æ–Ω–∞."""
    if not OPENROUTER_API_KEY:
        return "–û—à–∏–±–∫–∞: API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."

    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    models = [
        "deepseek/deepseek-chat-v3-0324:free",
        "qwen/qwen3-30b-a3b:free",
        "google/gemini-2.0-flash-thinking-exp:free",
    ]

    last_error = None

    for index, model_name in enumerate(models):
        try:
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            prompt = f"""
            –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

            –¢–û–ù –†–ê–ó–ì–û–í–û–†–ê: {sentiment_label}
            –¢–ï–ö–°–¢ –†–ê–ó–ì–û–í–û–†–ê: 
            \"\"\"{text}\"\"\"

            –î–∞–π 1-2 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –≤ –±—É–¥—É—â–µ–º.
            –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π –≤ –≤–∏–¥–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.
            """

            # –í—ã–∑–æ–≤ OpenRouter API
            completion = client.chat.completions.create(
                model=model_name,
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=150,
                temperature=0.7
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            response = completion.choices[0].message.content.strip()
            if response:
                return response
            else:
                last_error = "–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
                continue

        except Exception as e:
            error_msg = str(e)
            last_error = error_msg

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            rate_limit_indicators = [
                "429",
                "rate limit",
                "too many requests",
                "limit exceeded",
                "overload",
                "busy",
                " temporarily "
            ]

            is_rate_limit_error = any(indicator in error_msg for indicator in rate_limit_indicators)

            # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ª–∏–º–∏—Ç–∞ –∏ –µ—Å—Ç—å –µ—â–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
            if is_rate_limit_error and index < len(models) - 1:
                # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                warning_placeholder = st.empty()
                warning_placeholder.warning(
                    f"–ú–æ–¥–µ–ª—å {model_name} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤). –ü—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                time.sleep(2)
                warning_placeholder.empty()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                continue

            # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ
            if index == len(models) - 1:
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}"


# -------------------- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å --------------------
with st.sidebar:
    st.header("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    if OPENROUTER_API_KEY:
        st.success("API –∫–ª—é—á OpenRouter –∑–∞–≥—Ä—É–∂–µ–Ω")
    else:
        st.error("API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if HUGGINGFACE_TOKEN:
        st.success("–¢–æ–∫–µ–Ω Hugging Face –∑–∞–≥—Ä—É–∂–µ–Ω")
    else:
        st.warning("–¢–æ–∫–µ–Ω Hugging Face –Ω–µ –Ω–∞–π–¥–µ–Ω")

    st.markdown("""
    **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:**
    - –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)
    - –î–æ–∫—É–º–µ–Ω—Ç—ã Word (.docx)

    **–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**
    - –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: Hugging Face Inference API
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: DeepSeek V3 —á–µ—Ä–µ–∑ OpenRouter 
    """)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
input_method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:", ["–¢–µ–∫—Å—Ç", "–§–∞–π–ª"])

input_text = ""

if input_method == "–¢–µ–∫—Å—Ç":
    input_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:", height=250,
                              placeholder="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å—é–¥–∞...")

else:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π", type=["txt", "docx"])
    if uploaded_file is not None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        st.write(f"–ò–º—è —Ñ–∞–π–ª–∞: {uploaded_file.name}")
        st.write(f"–¢–∏–ø —Ñ–∞–π–ª–∞: {uploaded_file.type}")
        st.write(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {uploaded_file.size} –±–∞–π—Ç")

        input_text = extract_text_from_file(uploaded_file)
        if input_text:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            unique_key = f"file_content_{uploaded_file.name}_{uploaded_file.size}"
            st.text_area("–¢–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞:", value=input_text, height=250, key=unique_key)
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É.")

if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
    if not input_text or not input_text.strip():
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
        st.stop()

    # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–π —Ç–æ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —á–µ—Ä–µ–∑ Hugging Face API..."):
        sentiment_result = analyze_sentiment_with_api(input_text)

    if "error" in sentiment_result:
        st.error(sentiment_result["error"])
        st.stop()

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    sentiment_label = sentiment_result['label']
    sentiment_score = sentiment_result['score']

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–µ—Ç–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
    sentiment_labels_ru = {
        "POSITIVE": "–ü–û–ó–ò–¢–ò–í–ù–´–ô",
        "NEGATIVE": "–ù–ï–ì–ê–¢–ò–í–ù–´–ô",
        "NEUTRAL": "–ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô",
        "LABEL_0": "–ù–ï–ì–ê–¢–ò–í–ù–´–ô",
        "LABEL_1": "–ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô",
        "LABEL_2": "–ü–û–ó–ò–¢–ò–í–ù–´–ô"
    }

    sentiment_label_ru = sentiment_labels_ru.get(sentiment_label, sentiment_label)

    st.success("–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    col1, col2 = st.columns(2)
    with col1:
        st.metric(label="**–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —Ç–æ–Ω**", value=sentiment_label_ru)
    with col2:
        st.metric(label="**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏**", value=f"{sentiment_score:.2f}")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ LLM
    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò..."):
        recommendations = generate_llm_recommendations(input_text, sentiment_label_ru)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if recommendations and not recommendations.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
        st.markdown(recommendations)
    else:
        st.error(recommendations)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
col1, col2 = st.columns(2)

with col1:
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ TXT —Ñ–∞–π–ª–∞
    test_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä. –í—Å–µ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ, –∫–ª–∏–µ–Ω—Ç –±—ã–ª –¥–æ–≤–æ–ª–µ–Ω."
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π TXT —Ñ–∞–π–ª",
        data=test_text,
        file_name="—Ç–µ—Å—Ç–æ–≤—ã–π_—Ä–∞–∑–≥–æ–≤–æ—Ä.txt",
        mime="text/plain"
    )

with col2:
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ DOCX —Ñ–∞–π–ª–∞
    docx_file = create_test_docx_file()
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π DOCX —Ñ–∞–π–ª",
        data=docx_file,
        file_name="—Ç–µ—Å—Ç–æ–≤—ã–π_—Ä–∞–∑–≥–æ–≤–æ—Ä.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

# -------------------- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ --------------------

with st.expander("‚ÑπÔ∏è –û –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"):
    st.markdown("""
    –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ **–ò–ò-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤**, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.

    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - **–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:** –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Hugging Face Inference API.
    - **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:** –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ DeepSeek V3 —á–µ—Ä–µ–∑ OpenRouter.
    - **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤:** –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (.txt) –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ Word (.docx).
    - **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –ö–ª—é—á–∏ API —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ, –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π.

    **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** Python, Streamlit, Hugging Face Inference API, OpenRouter API, python-docx
    """)

with st.expander("‚ö†Ô∏è –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫"):
    st.markdown("""
        **–ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
        1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ `.env` —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω Hugging Face
        2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ Hugging Face –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Inference API

        **–ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
        1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å OpenRouter API –∫–ª—é—á–∞ –≤ —Ñ–∞–π–ª–µ `.env`
        2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ OpenRouter –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã 
        3. –ü—Ä–∏ –æ—à–∏–±–∫–µ 429 (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏) –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å

        **–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞):**
        - deepseek/deepseek-chat-v3-0324:free (–æ—Å–Ω–æ–≤–Ω–∞—è)
        - qwen/qwen3-30b-a3b:free (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è)
        - google/gemini-2.0-flash-thinking-exp:free (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è)

        **–ö–æ–¥—ã –æ—à–∏–±–æ–∫ OpenRouter:** 
        - 400: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        - 401: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        - 402: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
        - 403: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
        - 408: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
        - 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏)
        - 502: –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏
        - 503: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """)